const input = `
\\.........../..\\..../.../......./.....\\.................-..............-......./..-................./.\\|......
../..|..\\..\\...........\\..........-..|.|...........................|...../..............-.................-../
.|..\\................../...........................|..............|...-.................././........./........
......./....\\.|................\\\\....|...\\......................../\\......|......../..........-........./.....
........................-......................|...\\.............-..|..|..........|...........................
.............../-............\\....\\...............-......\\..-.............\\./...........|.....................
........./|.|...........................-.........................-.-.......\\.........-.......\\/....|.........
............-.-.........\\........../........|..........||............./.-.....................................
................||.....|................-........\\............./.................-....../......|..........\\...
........................../\\..|.......|........|.|..../../.../.....-.-..-..-..........................\\.......
..-.......\\..............|.|...........|............./....-...........|......-.......|...........|.|....\\.....
.\\./.\\.....-.................................|.......-|...\\..........\\.........-./......./...................\\
....|.................|..............|..|.\\............\\\\...\\......\\..................-..................\\../|
..........|.....\\..............................|.-.\\................-................./|............../.......
..\\|......./............-...............|...|...-..|................../..../.|.........\\..........-.........\\.
.|\\............../............-/.........\\.......\\.........../........................./......................
...\\..................................................\\...|...............\\..............\\....................
..|........./..........|..........................././..............................................\\\\.|......
...........-.-..............\\..-............-..................|/|..............|..-...../.|................\\.
..........|..|.../...........................|....-....../........................-.........|.................
\\.....................\\............/...........-....................../.\\...........-..../..........\\.........
........-................\\\\\\.........|/....../\\..|..|.-...-..............\\.....|..............-.........-.....
..........-........-....|.................-.........................\\\\...-...\\|..|.............../.....\\.|....
.............................................................|........\\-................-....................\\
/......\\....|-............./...........|................/...\\.........|.....-.............|/...|..|...../.....
|...-.........-....................................././|..\\...\\..../.......|.......\\................../.......
...........-..-........../........................\\\\...................................\\......................
............\\.......\\\\|.|.......-.............|..../........-.....|....|.../.-............./.-........../...|.
...................................-..............\\...\\....\\...|..........|.................../..../.......|..
...-...............|......\\|/...............-./..../........................\\......../.....................|..
.........................................|....\\.\\..............\\-...\\\\........\\.../...........././............
......|........./.|./.................-...../..--.......|...............-.\\......|...................|........
.....-.-..............|............../...................\\/......./.....|............|....-...................
...-./..........-..........\\...../.......-................./........-............................\\....\\.......
\\.../.....|....................\\|...........................\\.......\\.../../............/.....................
.................-.............-.|/..............-.......\\...-..|..|........\\..../....../...|.................
.........-.................-..........|..........\\...................\\............./.................-.....\\..
....................|........./......|................/.............|................/.\\....|............\\..|.
..........................\\\\..../................./.........../-..||......./.............|--....|........\\-.-.
.......-.........|..-......-.....\\.......................................\\-......./.....\\.......\\/......\\.....
............-.......\\.............-....||.-.....................\\........../..................................
...|........-......\\....|.......-.....|.-......\\........./.-....-..................../..|..................\\..
....\\..-.....\\.......\\.....................-.........\\............/.....-.../......-..................\\.......
.......-...........\\.../..............\\..........\\..........-................../....-..|....-.......-.........
..../......|...................../\\|......-.......-|.........\\......|..../||............\\........|............
......\\.............|...-..................\\...|.............-|..-........|................\\..................
|./../.............................-..............|.../.....-......|.....\\......./........-.......\\...........
.............................|...../......\\.................\\......-.....|..../................./......./.....
..../................-.-..........\\....\\...........\\......\\....|\\..................|...../|.......-.........\\.
.........../.-.....././..|..................................-..........\\................/........../|....|....
.||........\\.....\\.-....\\-........................../............................................-..../.......
.../...\\.....-\\...........\\..........|.\\...|\\..............|........|........|..\\\\.../.|............|.........
.......\\..-....../......./..................\\...../\\.-....................|.......\\.......-...................
...-..........\\/..........-...|..................|..................-.../.............-..............\\\\..-./..
....\\...|..|...........-.........|.............................\\....-....../..\\......................../...../
.-../..\\..........|....|........../.......-......................\\..............-.....................-.......
|................/..-...........-.\\...-|......./.......\\..-.....|....\\......../............\\..................
../../-\\-....................|...........|...|..................-...|...........\\.......\\.....\\.........-/....
......................................-...-................/.....|..-../..\\................|./...../.../......
....................../.........\\......|.\\.../......................\\...\\.....-....................|..........
.........|.-.......\\/...../-......|....-.....-.-...........|..........................|....--.........|.......
........................................-............./....-........|........|||-.....\\....................\\..
...............|\\.............\\\\..-.....|....................\\.....-........................\\.....|.......|...
.......|..............................................................................................\\.\\/\\...
.................|..../..................../.......\\............|....................|.-........|....\\.|......
|...............-.................................\\........\\...........-...................-................|.
.\\.........../....||..............................................|......-.....|......................-.|.....
......././.........../...........\\.......-...--./|..-......................\\............./.....|...|..........
..\\...|............|..|.\\..........|../.............-...\\............|...................................../..
...................|.-..........-..........|..\\...../..../....\\.//..........|./...............................
./|...../....../..................-\\......|.......|.......\\.............|....\\............./.|..-...-......../
.|....\\........\\........-....|........../........-.........\\..............................................\\...
.....-|..........|....-..................-............................/.|..........\\.............../......../.
.........................\\.........|.......|./.../.......\\........-........................\\..-\\.../..........
.....\\....-\\..............-......................-....\\..................-............................/.......
.............|...|.............-...\\.....|..\\................\\-..............|.......\\........................
.....|............|./..\\......................./..../............../......../.......................|-....-...
....|....|.......\\..|...../......................................\\......................-....|..............|.
.\\..../.....-.../.........../................/..\\....\\............./......\\....\\............../...............
/|../...................--.......\\....../..-./....-.......................\\..../|.............\\...|..../......
.....-.........-...........-.........|.........................../.............|...-.....-......|.............
............./.......-..../.....|....|............\\./....\\/.................................../...............
....\\.........\\................|...-.....-.......................................\\........|........../........
............................-...........|...|......../..-......\\\\...../....................|.....|.........-..
..\\./.....-...|-...........\\....-....................................\\.............-..........\\...............
.................|.\\/.-....../............-...\\.............\\..../.\\...\\........|............-./............./
..\\..............|..-\\.|.............../...............-\\..|../.........................\\.....................
....-..........././............/......-........-..........-.....-\\................../.........................
....-......\\...|......./.................-.........................../.../..../\\.......|............./........
...|...\\........\\............................\\..........\\|..\\.-..................../...........|..-\\...|.../..
./.............|.................../..|..|..............|............|.............-...../.|..................
................/....\\.........|...................|.....-/..../..\\\\........\\........./....|....-..../.....\\..
|..............\\......\\............................................/......||............|/....\\..........|.-..
.............|...........|..........|..............\\............\\...\\.........|...............................
...../....../\\....................../............./.................\\.-.......|../-...........................
\\....................|....|...|.\\/............-|...|.........................|.................../../.........
...........\\|..|..-...........-...............................-\\|............./..................\\..........|.
.........-./....\\........\\.............-........-.|....................|......................../\\............
..|...............\\......-.........................................................\\...././...................
/...|...........-....\\.................................\\./.......|...../...../.|........-.-.................|.
/..........\\......../......|........|......................................../................\\....|.......\\.\\
\\..\\....-..........//.........................\\.....\\....................................................\\....
......../.............-........................|........................../\\.................|................
.........................................|................./.....-.........-......|//.-........//........-..|.
......../.\\.../............./........|\\.....-..\\./...........................-....-........|.\\|/............\\.
.\\.../.....|...../.|.....................-................|..................../..-...\\....\\..............|...
/.............|./...../..-.........\\.|..............|.......|.....|..../...|...\\..................-./.........
..........|..............\\................\\....../.-../..-....|.....|.........-...............................
.............../............|........................../......./.\\.....................-...|./.......-.....\\..
.................../.......|.|...........\\./-./\\||.|....|........-...........\\......-....-..........-.........
`

let beams = [];
const rowSize = input.trim().split("\n").length
const colSize = input.trim().split("\n")[0].trim().split("").length

class Beam {
    coords = [];
    direction = "";

    constructor(coords, direction) {
        this.coords = coords;
        this.direction = direction;
    }

    move(coords, direction) {
        this.coords = coords;
        if (direction)
            this.direction = direction;
    }

    moveUp() {
        const [row, col] = this.coords;
        if(row-1 >= 0)
            this.move([row-1, col], "up");
    }

    moveRight() {
        const [row, col] = this.coords;
        if(col+1 <= colSize-1)
            this.move([row, col+1], "right");
    }

    moveDown() {
        const [row, col] = this.coords;
        if(row+1 <= rowSize-1)
            this.move([row+1, col], "down");
    }

    moveLeft() {
        const [row, col] = this.coords;
        if(col-1 >= 0)
            this.move([row, col-1], "left");
    }

    split(direction){
        if(direction === "horizontal"){
            if(this.coords[1] - 1 >= 0)
                beams.push(new Beam([this.coords[0], this.coords[1] - 1], "left"));

            this.moveRight();
        }
        else {
            if(this.coords[0] - 1 >= 0)
                beams.push(new Beam([this.coords[0] - 1, this.coords[1]], "up"));
            this.moveDown();
        }
    }
}

class Tile {
    coords;
    tile;
    beams = [];

    constructor(coords, tile) {
        this.coords = coords;
        this.tile = tile;
    }

    addBeam(beam) {
        this.beams.push(beam.direction)
    }
}

class Space extends Tile {
    constructor(coords, tile) {
        super(coords, tile);
    }

    interact(beam) {
        this.addBeam(beam);

        switch (beam.direction) {
            case "right":
                beam.moveRight();
                break;
            case "up":
                beam.moveUp();
                break;
            case "down":
                beam.moveDown();
                break;
            case "left":
                beam.moveLeft();
                break;
            default:
                break;
        }
    }
}

class Mirror extends Space {
    constructor(coords, tile) {
        super(coords, tile);
    }

    interact(beam) {
        this.addBeam(beam);

        if (this.tile === "/") { // for / mirror
            switch (beam.direction) {
                case "right":
                    beam.moveUp();
                    break;
                case "up":
                    beam.moveRight();
                    break;
                case "down":
                    beam.moveLeft();
                    break;
                case "left":
                    beam.moveDown();
                    break;
                default:
                    break;
            }
        }
        else { // for \ mirror
            switch (beam.direction) {
                case "right":
                    beam.moveDown();
                    break;
                case "up":
                    beam.moveLeft();
                    break;
                case "left":
                    beam.moveUp();
                    break;
                case "down":
                    beam.moveRight();
                    break;
                default:
                    break;
            }
        }
    }
}

class Splitter extends Space {
    constructor(coords, tile) {
        super(coords, tile);
    }

    interact(beam) {
        this.addBeam(beam);
        if(this.tile === "|") { // for | splitter
            switch (beam.direction) {
                case "right":
                    beam.split("vertical");
                    break;
                case "up":
                    beam.moveUp();
                    break;
                case "left":
                    beam.split("vertical");
                    break;
                case "down":
                    beam.moveDown();
                    break;
                default:
                    break;
            }
        }
        else {
            switch (beam.direction) {
                case "right":
                    beam.moveRight();
                    break;
                case "up":
                    beam.split("horizontal");
                    break;
                case "left":
                    beam.moveLeft();
                    break;
                case "down":
                    beam.split("horizontal");
                    break;
                default:
                    break;
            }
        }
    }
}


function getEdge(array) {
    const edges = [];

    for (let col = 0; col < colSize; col++) {
        edges.push({ row: 0, col, direction: "down" });
    }

    for (let row = 0; row < rowSize; row++) {
        edges.push({ row, col: array[row].length - 1, direction: "left" });
    }

    for (let col = colSize-1; col >= 0; col--) {
        edges.push({ row: rowSize - 1, col, direction: "up" });
    }

    for (let row = rowSize - 1; row >= 0; row--) {
        edges.push({ row, col: 0, direction: "right" });
    }

    return edges;
}
const findMax = (data) => {
    let maxCountItem = data[0];

    for (let i = 1; i < data.length; i++) {
        if (data[i].count > maxCountItem.count) {
            maxCountItem = data[i];
        }
    }

    return maxCountItem;
}

const lookup = {
    ".": Space,
    "|": Splitter,
    "-": Splitter,
    "/": Mirror,
    "\\": Mirror,
}
const edges = getEdge(Array(rowSize).fill(Array(colSize)));

const edgesResult = edges.map(({row, col, direction}) => {
    const tiles = input.trim().split("\n")
        .map((line, row) => (
            line.trim().split("").map((tile, col) => new lookup[tile]([row, col], tile))
        ));

    beams = [new Beam([row, col], direction)];

    let index = 0;
    while(true) {
        if(index >= beams.length)
            break;

        const beam = beams[index];
        while(true){
            const tile = tiles[beam.coords[0]][beam.coords[1]];

            if(tile.beams.find(direction => direction === beam.direction))
                break;
            tile.interact(beam);
        }
        index++;
    }
    const count = tiles.reduce((result, line) => {
        result+=line.filter(cell => cell.beams.length).length
        return result
    }, 0);

    return {row, col, count};
})


console.log(findMax(edgesResult))